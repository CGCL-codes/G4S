//
// time: Tue Dec  2 18:20:53 2003
//
// version: 3.2.0 (format), 4.3.0 (DX)
//
//
// Begin MDF
// MODULE VelocityRTFtoXYZ
// CATEGORY Macros
// DESCRIPTION transform velocity vector from spherical coordinate to Cartesian coordinate
// INPUT input_1; field; (no default);  
// OUTPUT output_1; value or value list or field;  
// End MDF
// workspace: width = 500, height = 400
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro VelocityRTFtoXYZ(
 input_1
) -> (
 output_1
) {
    // 
    // node Input[2]: x = 0, y = 0, inputs = 0, label = Input
    // parameter: position = 1, name = 'input_1', value = ' ', descriptive = 0, description = ' ', required = 0, visible = 1
    //
VelocityRTFtoXYZ_Input_2_out_1 = input_1;
    // 
    // node Mark[17]: x = 85, y = 80, inputs = 2, label = Mark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "positions"
    //
VelocityRTFtoXYZ_Mark_17_out_1[cache: 0] = 
    Mark(
    VelocityRTFtoXYZ_Input_2_out_1,
    "positions"
    ) [instance: 17, cache: 1];
    // 
    // node Compute[84]: x = 0, y = 126, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "[$0.z*sin($1.x)*cos($1.y)+$0.x*cos($1.x)*cos($1.y)-$0.y*sin($1.y), $0.z*sin($1.x)*sin($1.y)+$0.x*cos($1.x)*sin($1.y)+$0.y*cos($1.y), $0.z*cos($1.x)-$0.x*sin($1.x)]"
    // expression: value = [velocity.z*sin(positions.x)*cos(positions.y)+velocity.x*cos(positions.x)*cos(positions.y)-velocity.y*sin(positions.y), velocity.z*sin(positions.x)*sin(positions.y)+velocity.x*cos(positions.x)*sin(positions.y)+velocity.y*cos(positions.y), velocity.z*cos(positions.x)-velocity.x*sin(positions.x)]
    // name[2]: value = velocity
    // name[3]: value = positions
    //
VelocityRTFtoXYZ_Compute_84_out_1[cache: 0] = 
    Compute(
    "[$0.z*sin($1.x)*cos($1.y)+$0.x*cos($1.x)*cos($1.y)-$0.y*sin($1.y), $0.z*sin($1.x)*sin($1.y)+$0.x*cos($1.x)*sin($1.y)+$0.y*cos($1.y), $0.z*cos($1.x)-$0.x*sin($1.x)]",
    VelocityRTFtoXYZ_Input_2_out_1,
    VelocityRTFtoXYZ_Mark_17_out_1
    ) [instance: 84, cache: 1];
    // 
    // node Output[2]: x = 0, y = 206, inputs = 1, label = Output
    // parameter: position = 1, name = 'output_1', value = ' ', descriptive = 0, description = ' ', required = 0, visible = 1
    //
output_1 = VelocityRTFtoXYZ_Compute_84_out_1;
// network: end of macro body
}
VelocityRTFtoXYZ_Input_2_out_1 = NULL;
VelocityRTFtoXYZ_Mark_17_out_1 = NULL;
VelocityRTFtoXYZ_Compute_84_out_1 = NULL;
